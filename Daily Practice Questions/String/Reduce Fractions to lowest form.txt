#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);

int parse_int(char*);

int gcd(int x,int y)
{
    if(y==0){
        return x;
    }
    else
    return gcd(y,x%y);
}

char** ReduceFraction(int fractions_count, char** fractions, int* result_count) 
{
    for(int q=0;q<fractions_count;q++)
    {
        int x,y;
        char n1[5];
        char n2[5];
        char str[10];
        
        strcpy(str,fractions[q]);
        int i,len1=0,len2=0;
        for(i=0;str[i]!='/';i++)
        {
            len1++;
            n1[i]=str[i];
        }
        n1[i]='\0';
        i++;
        for(;str[i]!='\0';i++){
            len2++;
            n2[i-len1-1]=str[i];
        }
        n2[len2]='\0';
        
        x=parse_int(n1);
        y=parse_int(n2);
        
        int res=gcd(x,y);
        
        printf("%d/%d\n",(x/res),(y/res));
    }
    
}

int main()
{
  int fractions_count = parse_int(ltrim(rtrim(readline())));
  char** fractions = malloc(fractions_count * sizeof(char*));
  for (int i = 0; i < fractions_count; i++) {
    char* fractions_item = readline();
    *(fractions + i) = fractions_item;
  }
  int result_count;
  char** result = ReduceFraction(fractions_count, fractions, &result_count);
  for (int i = 0; i < result_count; i++) {
    printf("%s", *(result + i));
    if (i != result_count - 1) {
      printf("\n");
    }
  }
  return 0;
}

char* readline() {
  size_t alloc_length = 1024;
  size_t data_length = 0;

  char* data = malloc(alloc_length);

  while (true) {
    char* cursor = data + data_length;
    char* line = fgets(cursor, alloc_length - data_length, stdin);

    if (!line) {
      break;
    }

    data_length += strlen(cursor);

    if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
      break;
    }

    alloc_length <<= 1;

    data = realloc(data, alloc_length);

    if (!data) {
      data = '\0';

      break;
    }
  }

  if (data[data_length - 1] == '\n') {
    data[data_length - 1] = '\0';

    data = realloc(data, data_length);

    if (!data) {
      data = '\0';
    }
  } else {
    data = realloc(data, data_length + 1);

    if (!data) {
      data = '\0';
    } else {
      data[data_length] = '\0';
    }
  }

  return data;
}

char* ltrim(char* str) {
  if (!str) {
    return '\0';
  }

  if (!*str) {
    return str;
  }

  while (*str != '\0' && isspace(*str)) {
    str++;
  }

  return str;
}

char* rtrim(char* str) {
  if (!str) {
    return '\0';
  }

  if (!*str) {
    return str;
  }

  char* end = str + strlen(str) - 1;

  while (end >= str && isspace(*end)) {
    end--;
  }

  *(end + 1) = '\0';

  return str;
}

int parse_int(char* str) {
  char* endptr;
  int value = strtol(str, &endptr, 10);

  if (endptr == str || *endptr != '\0') {
    exit(EXIT_FAILURE);
  }

  return value;
}