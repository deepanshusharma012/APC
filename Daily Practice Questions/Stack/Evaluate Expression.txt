/**
 * @input A : array of strings termination by '\0'
 * @input n1 : number of strings in array A
 * 
 * @Output Integer
 */
 int stack[40];
 int top=-1;
 
 void push(int item)
 {
     top++;
     stack[top]=item;
 }
 
 int pop()
 {
     return stack[top--]; 
 }
 
 int isNumber(char* A)
 {
     int i,num=0,x=0,n=0;
     char ch;
     for(i=0;A[i]!='\0';i++)
     {
         ch=A[i];
        //  n=0;
        //  x=0;
         if(ch=='-'&&A[i+1]!='\0')
         {
             n=1;
         }
         else if(isdigit(ch))
         {
             num=num*10+(ch-'0');
         }
         else
         {
             x=1;
             break;
         }
     }
     
     if(x==1)
     return -637;
     else if(n==1)
     return num*-1;
     else
     return num;
 }
 
int evalRPN(char** A, int n1) {
    int i,num,a,b;
    char* ch;
    for(i=0;i<n1;i++)
    {
        ch=A[i];
        num=isNumber(ch);
        if(num!=-637)
        {
            push(num);
        }
        else
        {
            b=pop();
            a=pop();
            if(ch[0]=='+')
                push(a+b);
            else if(ch[0]=='-')
                push(a-b);
            else if(ch[0]=='*')
                push(a*b);
            else if(ch[0]=='/')
                push(a/b);
        }
    }
    
    return pop();
}
