#include <stdio.h>

int main()
{
    int m,n;
    scanf("%d",&m);
    scanf("%d",&n);
    int arr[m][n];
    int minRow=0,maxRow=m-1,minCol=0,maxCol=n-1;
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&arr[i][j]);
        }
    }
    int i,j,c=0,x;
    while(minRow<=maxRow)
    {
        x=0;
        if(x==0){
        for(j=minCol;j<=maxCol;j++)
        {
            i=minRow;
            x=1;
            printf("%d ",arr[i][j]);
        }
        }
        if(x==1){
        for(i=minRow+1;i<=maxRow;i++)
        {
            j=maxCol;
            x=2;
            printf("%d ",arr[i][j]);
        }}
        if(x==2){
        for(j=maxCol-1;j>=minCol;j--)
        {
            i=maxRow;
            x=3;
            printf("%d ",arr[i][j]);
        }}
        if(x==3){
        for(i=maxRow-1;i>minRow;i--)
        {
            j=minCol;
            x=4;
            printf("%d ",arr[i][j]);
        }}
        
        minRow++;
        minCol++;
        maxRow--;
        maxCol--;
        
    }
    return 0;
}


Solution 2: (ideal)

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> spiral;
        if(matrix.empty() || matrix[0].empty()) {
            return spiral;
        } 

        int minRow=0, maxRow=matrix.size()-1, minCol=0, maxCol=matrix[0].size()-1;

        while(minRow <= maxRow && minCol <= maxCol) {
            for (int i = minCol; i <= maxCol; i++) {
                spiral.push_back(matrix[minRow][i]);
            }
            minRow++;

            for (int i = minRow; i <= maxRow; i++) {
                spiral.push_back(matrix[i][maxCol]);
            }
            maxCol--;

            if (minRow <= maxRow) {
                for (int i = maxCol; i >= minCol; i--) {
                    spiral.push_back(matrix[maxRow][i]);
                }
                maxRow--;
            }

            if (minCol <= maxCol) {
                for (int i = maxRow; i >= minRow; i--) {
                    spiral.push_back(matrix[i][minCol]);
                }
                minCol++;
            }
        }

        return spiral;
    }
};
